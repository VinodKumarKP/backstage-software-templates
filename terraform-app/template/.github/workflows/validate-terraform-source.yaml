# packages/scaffolder-templates/terraform-deployment/content/.github/workflows/validate-terraform-source.yaml
name: Validate Terraform Source

on:
  workflow_dispatch:
    inputs:
      terraform_repo_url:
        description: 'URL of the Terraform source repository'
        required: true
        default: ${{ values.terraform_repo_url }}
      terraform_directory:
        description: 'Directory within the repository containing Terraform code'
        required: true
        default: ${{ values.terraform_directory }}

jobs:
  validate:
    name: 'Validate Terraform Source'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone Terraform repository
        uses: actions/checkout@v3
        with:
          repository: ${{ values.terraform_repo_url | replace('https://github.com/', '') }}
          ref: "main"
          path: terraform-code

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ values.terraform_version }}

      - name: Validate directory structure
        id: validate_structure
        run: |
          cd terraform-code/${{ values.terraform_directory }}
          
          echo "## Terraform Source Repository Structure" > validation_report.md
          echo "" >> validation_report.md
          
          # Check for essential files
          echo "### Essential Files" >> validation_report.md
          echo "" >> validation_report.md
          echo "| File | Status | Notes |" >> validation_report.md
          echo "|------|--------|-------|" >> validation_report.md
          
          # Check main.tf
          if [ -f "main.tf" ]; then
            echo "| main.tf | ✅ Found | Core Terraform configuration |" >> validation_report.md
          else
            echo "| main.tf | ❌ Missing | Missing core Terraform configuration |" >> validation_report.md
            echo "::warning::main.tf file is missing from the Terraform source"
          fi
          
          # Check variables.tf
          if [ -f "variables.tf" ]; then
            echo "| variables.tf | ✅ Found | Input variables definition |" >> validation_report.md
          else
            echo "| variables.tf | ❌ Missing | Missing input variables definition |" >> validation_report.md
            echo "::warning::variables.tf file is missing from the Terraform source"
          fi
          
          # Check outputs.tf
          if [ -f "outputs.tf" ]; then
            echo "| outputs.tf | ✅ Found | Output variables definition |" >> validation_report.md
          else
            echo "| outputs.tf | ⚠️ Missing | Consider adding outputs for better integration |" >> validation_report.md
            echo "::notice::outputs.tf file is missing - consider adding for better integration"
          fi
          
          # Check versions.tf or provider block
          if [ -f "versions.tf" ]; then
            echo "| versions.tf | ✅ Found | Provider and Terraform version constraints |" >> validation_report.md
          else
            if grep -q "provider \"" main.tf; then
              echo "| versions.tf | ⚠️ In main.tf | Provider defined in main.tf, consider separate file |" >> validation_report.md
            else
              echo "| versions.tf | ❌ Missing | No provider or version constraints found |" >> validation_report.md
              echo "::warning::No provider or version constraints found"
            fi
          fi
          
          # Check for README
          if [ -f "README.md" ]; then
            echo "| README.md | ✅ Found | Documentation |" >> validation_report.md
          else
            echo "| README.md | ⚠️ Missing | Consider adding documentation |" >> validation_report.md
            echo "::notice::README.md file is missing - consider adding documentation"
          fi
          
          echo "" >> validation_report.md
          
          # Check for variable definitions
          echo "### Variable Analysis" >> validation_report.md
          echo "" >> validation_report.md
          
          if [ -f "variables.tf" ]; then
            VAR_COUNT=$(grep -c "variable \"" variables.tf)
            VARS_WITH_DESC=$(grep -A 5 "variable \"" variables.tf | grep -c "description")
            VARS_WITH_TYPE=$(grep -A 5 "variable \"" variables.tf | grep -c "type")
            VARS_WITH_DEFAULT=$(grep -A 5 "variable \"" variables.tf | grep -c "default")
            
            echo "- Total variables: $VAR_COUNT" >> validation_report.md
            echo "- Variables with descriptions: $VARS_WITH_DESC" >> validation_report.md
            echo "- Variables with type constraints: $VARS_WITH_TYPE" >> validation_report.md
            echo "- Variables with default values: $VARS_WITH_DEFAULT" >> validation_report.md
            
            # Check compliance
            if [ "$VARS_WITH_DESC" -lt "$VAR_COUNT" ]; then
              echo "::warning::Some variables are missing descriptions"
              echo "- ⚠️ Some variables are missing descriptions" >> validation_report.md
            fi
            
            if [ "$VARS_WITH_TYPE" -lt "$VAR_COUNT" ]; then
              echo "::warning::Some variables are missing type constraints"
              echo "- ⚠️ Some variables are missing type constraints" >> validation_report.md
            fi
          fi
          
          echo "" >> validation_report.md
          
          # Run terraform fmt check
          echo "### Code Formatting" >> validation_report.md
          echo "" >> validation_report.md
          
          terraform fmt -check -recursive -diff > fmt_output.txt 2>&1
          FMT_STATUS=$?
          
          if [ $FMT_STATUS -eq 0 ]; then
            echo "✅ Terraform code is properly formatted" >> validation_report.md
          else
            echo "❌ Terraform code has formatting issues:" >> validation_report.md
            echo "" >> validation_report.md
            echo '```diff' >> validation_report.md
            cat fmt_output.txt >> validation_report.md
            echo '```' >> validation_report.md
            echo "::error::Terraform code has formatting issues"
          fi
          
          echo "" >> validation_report.md
          
          # Run terraform validate
          echo "### Terraform Validation" >> validation_report.md
          echo "" >> validation_report.md
          
          terraform init -backend=false > /dev/null 2>&1
          terraform validate > validate_output.txt 2>&1
          VALIDATE_STATUS=$?
          
          if [ $VALIDATE_STATUS -eq 0 ]; then
            echo "✅ Terraform code passed validation" >> validation_report.md
          else
            echo "❌ Terraform validation failed:" >> validation_report.md
            echo "" >> validation_report.md
            echo '```' >> validation_report.md
            cat validate_output.txt >> validation_report.md
            echo '```' >> validation_report.md
            echo "::error::Terraform validation failed"
          fi
          
          # Check for AWS best practices (if using AWS provider)
          if grep -q "provider \"aws\"" *.tf; then
            echo "" >> validation_report.md
            echo "### AWS Best Practices" >> validation_report.md
            echo "" >> validation_report.md
            
            # Check for tags
            if grep -q "tags" *.tf; then
              echo "✅ Resources have tags defined" >> validation_report.md
            else
              echo "⚠️ No tags found - consider adding tags to resources" >> validation_report.md
              echo "::notice::No resource tags found in Terraform code"
            fi
            
            # Check for encrypted S3 buckets
            if grep -q "aws_s3_bucket" *.tf; then
              if grep -q "server_side_encryption_configuration" *.tf || grep -q "aws_s3_bucket_server_side_encryption_configuration" *.tf; then
                echo "✅ S3 buckets have encryption configured" >> validation_report.md
              else
                echo "⚠️ S3 buckets found without encryption configuration" >> validation_report.md
                echo "::warning::S3 buckets found without encryption configuration"
              fi
            fi
            
            # Check for public access blocks
            if grep -q "aws_s3_bucket" *.tf; then
              if grep -q "block_public_" *.tf || grep -q "aws_s3_bucket_public_access_block" *.tf; then
                echo "✅ S3 buckets have public access blocks configured" >> validation_report.md
              else
                echo "⚠️ S3 buckets found without public access blocks" >> validation_report.md
                echo "::warning::S3 buckets found without public access blocks"
              fi
            fi
          fi
          
          echo "" >> validation_report.md
          
          # Generate summary
          echo "### Summary" >> validation_report.md
          echo "" >> validation_report.md
          
          ISSUES=$(grep -c "❌" validation_report.md)
          WARNINGS=$(grep -c "⚠️" validation_report.md)
          PASSES=$(grep -c "✅" validation_report.md)
          
          echo "- ✅ Passed checks: $PASSES" >> validation_report.md
          echo "- ⚠️ Warnings: $WARNINGS" >> validation_report.md
          echo "- ❌ Issues: $ISSUES" >> validation_report.md
          
          if [ $ISSUES -gt 0 ]; then
            echo "::error::Validation found $ISSUES issues that need to be addressed"
            echo "" >> validation_report.md
            echo "⚠️ **Please fix the issues before using this Terraform code in automated deployments**" >> validation_report.md
          elif [ $WARNINGS -gt 0 ]; then
            echo "::warning::Validation found $WARNINGS warnings to consider"
            echo "" >> validation_report.md
            echo "⚠️ **Review the warnings before proceeding with deployment**" >> validation_report.md
          else
            echo "::notice::Terraform source passed all validation checks"
            echo "" >> validation_report.md
            echo "✅ **Terraform source is ready for automated deployment**" >> validation_report.md
          fi
          
          cat validation_report.md
          cp validation_report.md $GITHUB_WORKSPACE/validation_report.md

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: terraform-validation-report
          path: validation_report.md

      - name: Create validation summary
        run: cat terraform-code/${{ github.event.inputs.terraform_directory || values.terraform_directory }}/validation_report.md >> $GITHUB_STEP_SUMMARY